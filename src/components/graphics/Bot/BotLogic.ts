const responses: { [key: string]: string[] } = {
  // --- あいさつ ---
  こんにちは: [
    "こんにちは！プログラミングのことで何か質問はありますか？",
    "どうも！何かお手伝いできることはありますか？",
    "こんにちは！良い一日ですね。",
  ],
  こんばんは: [
    "こんばんは。夜のコーディング、はかどっていますか？",
    "こんばんは！今日はどんなプログラミングをしましたか？",
  ],
  おはよう: [
    "おはようございます！朝活ですか？素晴らしい！",
    "おはようございます！今日も一日頑張りましょう！",
  ],
  ありがとう: [
    "どういたしまして！",
    "お役に立てて嬉しいです！",
    "いえいえ、また何かあれば聞いてくださいね。",
  ],
  すごい: [
    "ありがとうございます！そう言ってもらえると嬉しいです。",
    "まだまだ勉強中です！",
  ],
  名前: [
    "私はプログラミング学習をサポートするBotです。よろしくお願いします！",
    "私の名前はまだありませんが、いつでも話しかけてくださいね。",
  ],
  さようなら: [
    "はい、またいつでもどうぞ！プログラミング、頑張ってくださいね！",
    "お疲れ様でした！",
  ],
  バイバイ: [
    "はい、またいつでもどうぞ！プログラミング、頑張ってくださいね！",
    "お疲れ様でした！",
  ],
  疲れた: [
    "お疲れ様です。少し休憩するのも大事ですよ。",
    "頑張りましたね！無理しないでくださいね。",
  ],
  楽しい: [
    "それは良かったです！楽しむのが一番の上達の秘訣ですからね。",
    "私もお話できて楽しいです！",
  ],
  わからない: [
    "どの部分がわからないですか？もう少し具体的に教えてもらえると、ヒントが出せるかもしれません。",
    "大丈夫です、誰でも最初はわからないことだらけですよ。",
  ],
  プログラミングについて何かしていることはありますか: [
    "アプリ開発をしています。",
  ],
  使ったことがあるプログラミングスキルはありますか: [
    "PythonやJavaScriptなどは使ったことがあります。",
  ],
  普段どうやってプログラミングを学んでいますか: [
    "参考書やwebサイトで勉強しています。",
  ],
  そろそろ締めませんか: ["分かりました。お話しできてよかったです。"],

  // --- プログラミング言語 ---
  javascript: [
    "JavaScriptはWeb開発で最も人気のある言語の一つですね。フロントエンドからバックエンドまで幅広く使われています。特に興味のある分野はありますか？",
    "JavaScriptについてですね。非同期処理のAsync/AwaitやPromiseは理解できていますか？イベントループについても話せますよ。",
    "フレームワークは何を使っていますか？ReactやVue、Angularが人気ですね。",
    "JavaScriptの新しい機能、ES6以降の構文で気になるものはありますか？例えば、`let`/`const`、アロー関数、分割代入など。",
  ],
  react: [
    "ReactはUIを構築するための強力なライブラリです。コンポーネントベースの考え方が特徴的ですね。Hooksは使っていますか？",
    "React、いいですね！仮想DOMの仕組みがパフォーマンスの秘訣です。状態管理はどうしていますか？ReduxやContext APIがよく使われますね。ZustandやRecoilも選択肢に上がりますよ。",
    "Next.jsのようなフレームワークを使うと、Reactアプリケーションのサーバーサイドレンダリングや静的サイト生成も簡単にできますよ。ルーティングやデータフェッチについて質問はありますか？",
    "コンポーネントのライフサイクルや、副作用の扱い（useEffect）について困っていることはありませんか？",
  ],
  python: [
    "Pythonはデータサイエンスや機械学習、Web開発など、様々な分野で活躍している言語です。文法がシンプルで学びやすいですよ。どんな分野に興味がありますか？",
    "PythonはAI開発の分野で特に強いですね。NumPyやPandas、TensorFlowやPyTorchなどのライブラリが豊富です。これらのライブラリを使った経験はありますか？",
    "WebフレームワークならDjangoやFlaskが有名ですね。どちらか使ったことはありますか？データべースとの連携（ORMなど）についても話せますよ。",
    "Pythonの仮想環境（venv, Poetry, Condaなど）は使っていますか？プロジェクト管理に役立ちますよ。",
  ],
  typescript: [
    "TypeScriptはJavaScriptに静的な型付けを加えた言語で、大規模なアプリケーション開発で非常に役立ちます。コードの安全性が向上しますよ。",
    "TypeScriptを使うと、実行前にエラーを見つけやすくなるので、開発効率が上がりますね。ジェネリクスやユニオン型、インターフェースや型エイリアスなど、型の概念は理解できていますか？",
    "any型を使いすぎないのが、TypeScriptを活かすコツですよ。型推論を最大限に活用できていますか？",
    "tsconfig.jsonの設定で悩んだことはありませんか？`strict`モードや`esModuleInterop`などの設定について話しましょう。",
  ],
  html: [
    "HTMLはWebページの骨格を作るためのマークアップ言語ですね。すべてのWebサイトの基本です。",
    "HTMLタグの役割を一つずつ理解していくのが大事ですね。セマンティックHTMLは意識していますか？SEOにも影響しますよ。",
    "HTML5の新しい要素（`<header>`, `<nav>`, `<article>`, `<section>`, `<footer>`など）を効果的に使えていますか？",
  ],
  css: [
    "CSSはWebページの見た目を整えるための言語です。レイアウトや色、フォントなどを指定できます。どんなデザインに挑戦したいですか？",
    "CSSは奥が深いですよね。FlexboxやGridを使いこなせるとレイアウトが楽しくなりますよ。最近はTailwind CSSのようなユーティリティファーストのCSSも人気です。",
    "レスポンシブデザインは考慮していますか？メディアクエリを使って様々なデバイスに対応できますよ。モバイルファーストでの開発も重要です。",
    "CSSプリプロセッサ（Sass, Less, Stylusなど）やCSS-in-JS（Emotion, Styled Componentsなど）を使った経験はありますか？",
  ],
  java: [
    "Javaは汎用性が高く、WebアプリケーションからAndroidアプリ、大規模システムまで幅広く使われている言語です。Spring Frameworkをご存知ですか？",
    "Javaはオブジェクト指向の考え方を学ぶのにとても良い言語だと思います。継承、ポリモーフィズム、カプセル化といった概念は理解できていますか？抽象クラスやインターフェースの使い分けについて話しましょう。",
    "Javaのバージョンアップ（Java 8, 11, 17など）で追加された新機能について興味はありますか？Stream APIやLambda式は便利ですよ。",
  ],
  php: [
    "PHPは特にサーバーサイドのWeb開発で人気のある言語です。WordPressなど多くのCMSで採用されていますね。Laravelフレームワークを使ったことはありますか？",
    "PHPのバージョンアップでパフォーマンスやセキュリティが大きく向上しています。最新バージョンでの開発はしていますか？",
  ],
  sql: [
    "SQLはデータベースを操作するための言語です。データの取得、追加、更新、削除など、データベースとの対話には欠かせません。JOIN句は得意ですか？",
    "SQLを使いこなせると、データの扱いや分析がとても楽になりますよ。パフォーマンスを意識したクエリの書き方も重要です。インデックスやトランザクションについて話しましょう。",
    "ノーマライゼーション（正規化）について理解していますか？データの整合性を保つ上で大切な概念です。",
  ],
  ruby: [
    "Rubyは「書いていて楽しい」ことを重視した言語ですね。Ruby on Railsという強力なフレームワークが有名です。MVCパターンについて興味がありますか？",
    "まつもとゆきひろさんによって開発された日本生まれの言語ですよ！RailsのGem（ライブラリ）の豊富さも魅力ですね。",
  ],
  swift: [
    "SwiftはApple製品のアプリ開発によく使われる言語ですね。安全でモダンな設計が特徴です。iOSアプリ開発に挑戦中ですか？",
    "SwiftUIを使うとUI開発が直感的になりますよ。UIKitとの違いは何だと思いますか？非同期処理（Grand Central DispatchやCombine）についても話せますよ。",
  ],
  go: [
    "Go言語はGoogleが開発した言語で、シンプルさとパフォーマンスの高さが魅力です。サーバーサイドやCLIツール開発で人気がありますね。",
    "並行処理を簡単に書けるのがGo言語の大きな特徴の一つです。GoroutineやChannelについて興味がありますか？エラーハンドリングについてもGoならではの書き方がありますね。",
    "Go Modulesを使った依存関係の管理はスムーズにできていますか？",
  ],
  rust: [
    "Rustは安全性、速度、並行性に優れた言語ですね。システムプログラミングで特に注目されています。",
    "所有権システムは独特ですが、慣れるとメモリ安全性が高く保てて安心ですよ。WebAssemblyとの相性も良いですね。組み込み開発やゲーム開発でも注目されています。",
  ],
  kotlin: [
    "KotlinはAndroid開発の公式言語ですね。Javaとの相互運用性が高く、より簡潔で安全なコードが書けます。Androidアプリ開発に興味がありますか？",
    "サーバーサイドでKotlinを使うケースも増えていますね。KtorやSpring Boot with Kotlinの経験はありますか？コルーチンを使った非同期処理も特徴です。",
  ],

  // --- Web開発 ---
  フロントエンド: [
    "フロントエンドはユーザーが直接触れる部分ですね。React, Vue, Angularなどが人気のフレームワークです。UI/UXデザインにも興味がありますか？",
    "最近のフロントエンド開発では、ビルドツールの選定も重要です。Webpack、Vite、Parcelなど、どれか使ったことはありますか？HMR（ホットモジュールリプレイスメント）は便利ですよね。",
    "パフォーマンス最適化（バンドルサイズの削減、画像最適化、遅延ロードなど）について、何か工夫していることはありますか？",
  ],
  バックエンド: [
    "バックエンドはサーバー側で動く、ユーザーから見えない部分ですね。データベースの操作やビジネスロジックを担当します。どんな言語やフレームワークに興味がありますか？",
    "Node.js, Ruby on Rails, Django, Goなどがバックエンド開発でよく使われます。RESTful APIの設計は経験ありますか？マイクロサービスアーキテクチャについても話せますよ。",
    "認証・認可の仕組み（OAuth, JWTなど）や、APIセキュリティについて興味はありますか？",
  ],
  api: [
    "APIはアプリケーション同士が連携するための窓口のようなものですね。REST APIが広く使われています。GraphQLも人気が出てきましたね。",
    "API設計のベストプラクティスについて興味がありますか？セキュリティ面も重要ですね。APIのバージョン管理はどうしていますか？",
  ],
  rest: [
    "RESTはAPI設計の原則の一つですね。シンプルでわかりやすいのが特徴です。HTTPメソッド(GET, POST, PUT, DELETE)を正しく使い分けるのが重要ですね。",
    "RESTfulな設計におけるステートレス性やURIの設計規約について知っていますか？",
  ],
  graphql: [
    "GraphQLはAPIのためのクエリ言語ですね。クライアントが必要なデータを細かく指定できるのが大きなメリットです。RESTful APIとの違いは理解していますか？",
    "オーバーフェッチやアンダーフェッチの問題を解決できるのが良いですよね。Apollo Clientのようなライブラリを使ったことはありますか？スキーマ定義やリゾルバの書き方について話しましょう。",
  ],
  ssr: [
    "サーバーサイドレンダリング(SSR)ですね。初期表示速度の向上やSEOに有利な点がメリットです。ReactならNext.js、VueならNuxt.jsが有名です。",
    "SSRとCSR（クライアントサイドレンダリング）の使い分けについてご存知ですか？SSG（静的サイト生成）との違いも重要です。",
  ],

  // --- データベース ---
  データベース: [
    "データベースは情報を整理して保存しておく場所ですね。リレーショナルデータベース(RDB)が一般的ですが、NoSQLデータベースも増えています。どちらに興味がありますか？",
    "RDBならPostgreSQLやMySQL、NoSQLならMongoDBやRedisが有名ですね。スキーマ設計について学んだことはありますか？インデックスの重要性についても話しましょう。",
    "データベースのトランザクション分離レベルや、ACID特性についてご存知ですか？",
  ],
  nosql: [
    "NoSQLデータベースは、柔軟なデータ構造が特徴ですね。大量のデータを高速に扱いたい場合によく使われます。どのような種類のNoSQLデータベースに興味がありますか？",
    "MongoDBはドキュメント指向、Redisはキーバリュー型など、様々な種類があります。それぞれのユースケースについて質問はありますか？分散データベースの課題についても話せます。",
  ],

  // --- 開発プラクティス ---
  テスト: [
    "テストを書くことは、品質の高いソフトウェアを作る上でとても重要です。ユニットテスト、結合テスト、E2Eテストなど、様々な種類があります。どのテストに興味がありますか？",
    "テスト駆動開発(TDD)という開発手法もありますね。JestやTesting Libraryといったフレームワークを使っていますか？モックやスタブの利用についても話しましょう。",
    "カバレッジを意識してテストを書いていますか？",
  ],
  リファクタリング: [
    "リファクタリングは、外から見た振る舞いを変えずに内部の構造を改善することですね。コードをきれいに保つために不可欠です。どんなリファクタリング手法に興味がありますか？",
    "読みやすいコードは、将来の自分や他の開発者を助けますからね。デザインパターンを適用することもリファクタリングの一環ですね。コードの臭い（Bad Smells）に気づけていますか？",
    "継続的なリファクタリングをチームで実践できていますか？",
  ],
  アジャイル: [
    "アジャイル開発は、小さなサイクルを繰り返しながら柔軟に開発を進めていく手法ですね。スクラムやカンバンが有名です。",
    "アジャイルの原則について質問はありますか？計画通りに進めるよりも、変化に対応することを重視するのがアジャイルの考え方です。イテレーションやインクリメンタルな開発について話しましょう。",
  ],
  スクラム: [
    "スクラムはアジャイル開発のフレームワークの一つで、スプリントという短い期間で開発を繰り返します。デイリースクラム、スプリントレビュー、スプリントレトロスペクティブといったイベントがありますね。",
    "スクラムロール（スクラムマスター、プロダクトオーナー、開発チーム）についてご存知ですか？スプリントバックログやプロダクトバックログの管理について話しましょう。",
  ],
  devops: [
    "DevOpsは開発（Development）と運用（Operations）を組み合わせた考え方で、ソフトウェア開発のライフサイクル全体を効率化することを目指します。CI/CDパイプラインについて興味がありますか？",
    "継続的インテグレーション（CI）や継続的デリバリー（CD）はDevOpsの重要な要素ですね。TerraformやAnsibleのようなIaC（Infrastructure as Code）ツールも活用していますか？",
    "モニタリングやロギングの重要性についても話しましょう。",
  ],
  デザインパターン: [
    "デザインパターンは、過去の開発者たちが編み出した「うまい設計の型」のようなものです。コードの再利用性や保守性を高めるのに役立ちます。GoFのデザインパターンが有名ですね。",
    "SingletonやFactoryパターンはよく使われます。ご興味のあるパターンはありますか？ObserverパターンやStrategyパターンなども頻繁に出てきます。",
  ],
  セキュリティ: [
    "Webセキュリティは非常に重要ですね。SQLインジェクションやクロスサイトスクリプティング(XSS)などの脆弱性には気をつけたいです。OWASP Top 10をご存知ですか？",
    "IPAが公開している「安全なウェブサイトの作り方」は一度目を通しておくと良いですよ。HTTPSの重要性や、CSP（Content Security Policy）の設定について知っていますか？",
  ],
  oop: [
    "オブジェクト指向プログラミング（OOP）は、オブジェクトという概念を用いてプログラムを設計する手法です。ポリモーフィズム、継承、カプセル化が主要な原則ですね。",
    "オブジェクト指向の5大原則であるSOLID原則についてご存知ですか？これらの原則をコードにどう適用していますか？",
  ],
  データ構造: [
    "データ構造は、データを効率的に管理するための方法です。配列、リスト、ツリー、グラフ、ハッシュテーブルなど様々あります。どれか特に気になるものはありますか？",
    "適切なデータ構造を選ぶことは、プログラムのパフォーマンスに大きく影響します。例えば、高速な検索が必要な場合はハッシュテーブルが有力ですね。連結リストと配列の違いは説明できますか？",
  ],
  アルゴリズム: [
    "アルゴリズムは、問題を解決するための手順のことです。ソートアルゴリズムや探索アルゴリズムは基本ですね。最近何か学習しましたか？",
    "計算量（時間計算量、空間計算量）を意識することは、効率的なアルゴリズムを設計する上で非常に重要です。Big O記法は理解できていますか？特定のアルゴリズムの効率について質問はありますか？",
  ],
  デバッグ: [
    "デバッグは開発において非常に重要なスキルです。どのようなデバッグツールや手法を使っていますか？（例：コンソールログ、ブレークポイント、デバッガ）",
    "エラーメッセージを読み解くのがデバッグの第一歩ですね。他に何かデバッグで困っていることはありますか？",
  ],

  // --- インフラ・クラウド ---
  git: [
    "Gitはバージョン管理システムで、コードの変更履歴を記録したり、チームでの共同開発をスムーズに進めるために非常に重要です。基本的なコマンドは慣れましたか？",
    "Gitは今や開発者の必須スキルと言ってもいいかもしれませんね。`branch`や`merge`、`rebase`などの概念は理解できていますか？`git flow`や`GitHub Flow`のようなブランチ戦略は使っていますか？",
    "コンフリクトは怖いですが、落ち着いて対処すれば大丈夫ですよ！Pull RequestやMerge Requestの運用についても話しましょう。",
  ],
  github: [
    "GitHubはGitリポジトリをホストするサービスで、コードの共有や共同開発に広く使われています。プルリクエスト（PR）は使っていますか？コードレビューの経験はありますか？",
    "GitHub ActionsのようなCI/CDツールと連携すると、開発フローを自動化できますよ。IssueやProjectsを活用してタスク管理もできますね。",
    "OSS（オープンソースソフトウェア）への貢献にも興味がありますか？",
  ],
  docker: [
    "Dockerはコンテナ技術を使って、どこでも同じ開発環境を簡単に構築できるようにするツールです。便利ですよね！Dockerfileの書き方について質問はありますか？",
    "Dockerを使うと「自分の環境では動いたのに…」という問題が減らせますね。Docker Composeで複数のコンテナを管理する方法もありますよ。コンテナオーケストレーション（Kubernetesなど）についても興味がありますか？",
  ],
  aws: [
    "AWSは非常に多くのサービスを提供しているクラウドプラットフォームですね。EC2やS3あたりから触ってみるのがおすすめです。どのサービスに興味がありますか？",
    "クラウドを使いこなせると、作れるアプリケーションの幅がぐっと広がりますよ。サーバーレスのLambdaも人気ですね。AWS Certified Cloud Practitionerのような認定資格は興味ありますか？",
    "VPC（Virtual Private Cloud）やIAM（Identity and Access Management）など、インフラの基本設定についても話せます。",
  ],
  gcp: [
    "GCP（Google Cloud Platform）も人気のクラウドサービスですね。App EngineやCloud Functions、BigQueryなどがあります。AWSとの比較に興味がありますか？",
    "GCPではKubernetes Engine (GKE)やCloud Runなど、コンテナ関連のサービスも充実していますね。FirebaseもGoogleが提供しています。",
  ],
  azure: [
    "AzureはMicrosoftが提供するクラウドサービスですね。Windows系の技術を使っている方に馴染み深いかもしれません。どんなサービスに興味がありますか？",
    "Azure App ServiceやAzure Functionsなど、ウェブアプリケーションやサーバーレスに特化したサービスもありますね。Microsoftの環境に馴染みがある方には特におすすめです。",
  ],
  kubernetes: [
    "Kubernetesはコンテナのオーケストレーションツールで、コンテナ化されたアプリケーションのデプロイ、スケーリング、管理を自動化してくれます。k8sと略されたりします。",
    "大規模なサービスを安定して動かすのに非常に強力なツールです。コンテナ技術の次のステップとして学ぶ人が多いですね。Pod, Deployment, Serviceなどの基本的な概念は理解できていますか？",
  ],
  サーバーレス: [
    "サーバーレスは、サーバーの管理を自分で行わずにアプリケーションを動かす仕組みですね。AWS LambdaやGoogle Cloud Functionsなどが有名です。コスト効率も良いですよ。",
    "インフラの管理から解放されて、コードを書くことに集中できるのが魅力です。イベント駆動型アーキテクチャとの相性が良いです。Cold Start問題など、サーバーレスの課題についても話せますよ。",
  ],
  "ci/cd": [
    "CI/CDは継続的インテグレーション（Continuous Integration）と継続的デリバリー（Continuous Delivery）の略ですね。開発プロセスを自動化し、迅速かつ頻繁にソフトウェアをリリースするためのプラクティスです。",
    "Jenkins, GitHub Actions, GitLab CI/CD, CircleCIなど様々なツールがあります。どんな自動化に興味がありますか？",
  ],

  // --- 学習・キャリア ---
  エラー: [
    "エラーが出た時は、メッセージをよく読むのが解決の第一歩です。どんなエラーが出ていますか？具体的なエラーメッセージを教えてもらえれば、より的確なアドバイスができるかもしれません。",
    "エラーは成長のチャンスです！焦らず、エラーメッセージで検索したり、公式ドキュメントを確認してみましょう。Stack Overflowのようなコミュニティも役立ちます。",
    "エラーログを共有してくれれば、何かヒントが出せるかもしれません。再現手順も一緒に教えてもらえると助かります。",
  ],
  勉強: [
    "プログラミングの勉強法ですね。まずは作りたいものを決めて、それに向かって必要な技術を学ぶのがモチベーションを保ちやすくておすすめです。",
    "インプットとアウトプットのバランスが大事です。何か小さなものでも作ってみるのが一番の近道ですよ。毎日少しずつでもコードを書く習慣はありますか？",
    "公式ドキュメントを読む習慣をつけると、とても力がつきますよ。オンラインの学習プラットフォームやコミュニティも活用してみましょう。ペアプログラミングやもくもく会も有効です。",
  ],
  おすすめ: [
    "どんなことに興味がありますか？Web制作ならJavaScript、データ分析ならPythonがおすすめです。より具体的な目標や興味を教えてください。",
    "目的によっておすすめは変わりますね。例えば、ゲームを作りたいならUnity(C#)やUnreal Engine(C++)も良い選択肢です。モバイルアプリ開発やAI、データサイエンスなど、どんな分野に惹かれますか？",
  ],
  難しい: [
    "最初は誰でも難しく感じるものです。小さなことから一つずつ試していくのが上達のコツですよ。壁にぶつかった時は、一歩引いて全体像を見直すのも良い方法です。",
    "確かに、新しい概念を学ぶのは難しいですよね。でも、分かった時の喜びは大きいですよ！焦らず、一歩ずつ進んでいきましょう。詰まったら休憩するのも大切です。",
    "一人で悩まず、誰かに質問してみるのも大切です。私もお手伝いできますよ。技術コミュニティやオンラインフォーラムも活用してみましょう。",
  ],
  キャリア: [
    "プログラマーのキャリアは多様ですね。スペシャリストを目指す道もあれば、マネジメントに進む道もあります。どのようなキャリアパスに興味がありますか？",
    "ポートフォリオサイトを作って、自分のスキルをアピールできるようにしておくのがおすすめですよ。継続的な学習とアウトプットが重要です。技術ブログを書くのも良い経験になります。",
    "どのような業界や企業に興味がありますか？スタートアップ、大企業、受託開発など、それぞれ特徴がありますね。",
  ],
  ポートフォリオ: [
    "ポートフォリオは自分のスキルを証明する大切な作品集ですね。どんなものを作っていますか？具体的なプロジェクトについて教えてください。",
    "見た目だけでなく、コードの綺麗さや使っている技術、なぜそれを作ったのかという背景もアピールポイントになりますよ。開発プロセスや課題、それをどう解決したかなども記述すると良いでしょう。",
    "GitHubでの活動もポートフォリオの一部として見られます。コミット履歴やプルリクエストの作成、Issueでの議論なども意識していますか？",
  ],
  就職: [
    "就職活動、頑張ってください！自分の作ったものを見せられるポートフォリオがあると強いですよ。インターンシップの経験も有利に働くことが多いです。",
    "未経験からでも、学習意欲やポテンシャルをアピールできればチャンスは十分にあります。技術面接の対策も重要ですね。データ構造とアルゴリズムの基礎知識は必須です。",
    "企業選びの軸はありますか？（例：技術スタック、企業文化、成長性など）",
  ],
  転職: [
    "転職を考えているのですね。これまでの経験を活かせる分野か、新しい技術に挑戦するか、悩みますよね。どんな分野への転職を検討していますか？",
    "技術ブログなどで情報発信をしていると、スキルをアピールしやすくなりますよ。エージェントを活用するのも良い方法です。希望する企業の技術スタックを調べて、それに合わせてスキルを磨くのが効果的です。",
    "転職先の企業文化や働き方についてもリサーチはしていますか？",
  ],
  oss: [
    "オープンソースソフトウェア(OSS)への貢献は、スキルアップに繋がるとても良い経験になりますよ。何か貢献したいプロジェクトは見つかりましたか？",
    "簡単なドキュメントの修正からでも始められます。まずは興味のあるプロジェクトを探してみるのがおすすめです。コントリビューションガイドを読んでみましょう。小さなバグ修正や機能追加から始めるのが良いでしょう。",
    "OSSへの貢献は、GitHubプロフィールの強力なアピールポイントにもなります。",
  ],
  インポスター症候群: [
    "周りがすごすぎて、自分だけが偽物のように感じてしまうこと、ありますよね。でも、みんな最初は初心者だったんですよ。それは決してあなただけではありません。",
    "自分のやってきたことを記録しておくと、成長を実感できて自信につながるかもしれません。完璧主義を手放すことも大切です。小さな成功体験を積み重ねていきましょう。",
    "他者との比較ではなく、過去の自分と比較して成長を実感することが重要です。コミュニティで経験を共有するのも良いですよ。",
  ],
};

const defaultResponse =
  "すみません、よく分かりませんでした。別の言葉で試していただけますか？プログラミングについて、もっと具体的な質問をしてみてください。";

export const getBotResponse = (message: string): string => {
  const lowerCaseMessage = message.toLowerCase().trim();

  if (responses[lowerCaseMessage]) {
    const possibleResponses = responses[lowerCaseMessage];
    return possibleResponses[
      Math.floor(Math.random() * possibleResponses.length)
    ];
  }

  for (const keyword in responses) {
    if (lowerCaseMessage.includes(keyword)) {
      const possibleResponses = responses[keyword];
      return possibleResponses[
        Math.floor(Math.random() * possibleResponses.length)
      ];
    }
  }
  return defaultResponse;
};
